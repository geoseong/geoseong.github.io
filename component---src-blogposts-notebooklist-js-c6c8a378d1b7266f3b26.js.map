{"version":3,"sources":["webpack:///./src/blogposts/notebooklist.js","webpack:///./src/components/MetaInfo.js"],"names":["inlineStyle","alignRight","textAlign","marginHorizontal","margin","padding","moreBtnArea","marginTop","listItem","borderBottom","IndexPage","render","pageContext","this","props","react__WEBPACK_IMPORTED_MODULE_3___default","a","createElement","_components_Layout__WEBPACK_IMPORTED_MODULE_5__","type","_components_MetaInfo__WEBPACK_IMPORTED_MODULE_7__","title","notebook","locationAfterOrigin","toLowerCase","twittercard","keywords","Fragment","className","section","length","map","item","idx","key","style","gatsby__WEBPACK_IMPORTED_MODULE_4__","to","routing","id","name","Object","assign","Component","MetaInfo","description","createdDt","modifiedDt","ogImage","metaDescDom","openDescDom","twitDescDom","recurCnt","Math","floor","i","push","react__WEBPACK_IMPORTED_MODULE_1___default","content","substring","gatsby__WEBPACK_IMPORTED_MODULE_3__","query","_ref","_ref$site$siteMetadat","site","siteMetadata","defaultTitle","siteUrl","defaultDescription","defaultImage","defaultOgImage","twitterUsername","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","httpEquiv","property","rel","href","data","_public_static_d_3468742975_json__WEBPACK_IMPORTED_MODULE_0__"],"mappings":"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","file":"component---src-blogposts-notebooklist-js-c6c8a378d1b7266f3b26.js","sourcesContent":["import React, { Component } from 'react'\nimport { Link } from 'gatsby'\nimport Layout from '../components/Layout'\nimport routing from '../../postings/routings.json'\nimport MetaInfo from '../components/MetaInfo'\n\nconst inlineStyle = {\n  alignRight: {\n    textAlign: 'right',\n  },\n  marginHorizontal: {\n    margin: '0 .5rem',\n    padding: '.3rem 1rem',\n  },\n  moreBtnArea: {\n    marginTop: '.5rem',\n  },\n  listItem: {\n    marginTop: '1rem',\n    padding: '1rem',\n    borderBottom: '1px solid #073642',\n  },\n}\n\nclass IndexPage extends Component {\n  render() {\n    const {\n      props: { pageContext },\n    } = this\n    return (\n      <Layout type=\"blog\">\n        <MetaInfo\n          title={pageContext.notebook}\n          type=\"website\"\n          locationAfterOrigin={pageContext.notebook.toLowerCase()}\n          twittercard=\"summary\"\n          keywords={`${pageContext.notebook},geoseong,dev note`}\n        />\n        <React.Fragment>\n          <h1 className=\"text-light\">{pageContext.notebook}</h1>\n          {pageContext.section.length > 0 &&\n            pageContext.section.map((item, idx) => {\n              return (\n                <div key={'section-' + idx} style={inlineStyle.listItem}>\n                  <Link className=\"card-link\" to={routing[item.id]}>\n                    <div className=\"\">\n                      <h4 className=\"\">{item.name}</h4>\n                      <div\n                        style={{\n                          ...inlineStyle.alignRight,\n                          ...inlineStyle.moreBtnArea,\n                        }}\n                      >\n                        More...\n                      </div>\n                    </div>\n                  </Link>\n                </div>\n              )\n            })}\n        </React.Fragment>\n      </Layout>\n    )\n  }\n}\n\nexport default IndexPage\n","import React from 'react'\nimport Helmet from 'react-helmet'\nimport { StaticQuery, graphql } from 'gatsby'\n\n/**\n * @name MetaInfo\n * @param {Object} props \n * @description <meta>태그 조합해서 내뱉어주는 컴포넌트\n * @example \n    <MetaInfo\n      title=\"Match Online Manager\"\n      description=\"MOM Index Page\"\n      type=\"website\"\n      locationAfterOrigin=\"/test\"\n      twittercard=\"summary\"\n      keyword=\"key,word\"\n    />\n * @property {\n    title: <title>, og:title, twitter:title\n    description: og:description, twitter:description\n    type: og:type\n    locationAfterOrigin: host url 이후의 routing주소\n    twittercard: twitter:card\n    keyword: \n }   \n */\nconst MetaInfo = props => {\n  const descriptionLength = 320\n  const {\n    description,\n    title,\n    createdDt,\n    modifiedDt,\n    locationAfterOrigin,\n    twittercard,\n    keywords,\n    ogImage,\n  } = props\n  let metaDescDom = []\n  let openDescDom = []\n  let twitDescDom = []\n  if (description && description.length > descriptionLength) {\n    const recurCnt = Math.floor(description.length / descriptionLength)\n    for (let i = 0; i < recurCnt; i++) {\n      metaDescDom.push(\n        <meta\n          key={'desc-' + i}\n          name=\"description\"\n          content={description.substring(\n            i * descriptionLength,\n            i * descriptionLength + descriptionLength\n          )}\n        />\n      )\n      openDescDom.push(\n        <meta\n          key={'ogdesc-' + i}\n          name=\"og:description\"\n          content={description.substring(\n            i * descriptionLength,\n            i * descriptionLength + descriptionLength\n          )}\n        />\n      )\n      twitDescDom.push(\n        <meta\n          key={'twitdesc-' + i}\n          name=\"twitter:description\"\n          content={description.substring(\n            i * descriptionLength,\n            i * descriptionLength + descriptionLength\n          )}\n        />\n      )\n    }\n  }\n  const query = graphql`\n    query SEO2 {\n      site {\n        siteMetadata {\n          defaultTitle: title\n          siteUrl: siteUrl\n          defaultImage: image\n        }\n      }\n    }\n  `\n  return (\n    <React.Fragment>\n      <StaticQuery\n        query={query}\n        render={({\n          site: {\n            siteMetadata: {\n              defaultTitle,\n              defaultDescription,\n              siteUrl,\n              defaultImage,\n              twitterUsername,\n            },\n          },\n        }) => {\n          const defaultOgImage = `${siteUrl}/${defaultImage}`\n          return (\n            <Helmet>\n              <title>{title + ' : ' + defaultTitle}</title>\n              {/* Last Modified */}\n              <meta name=\"article:author\" content={'geoseong'} />\n              <meta name=\"article:published_time\" content={createdDt} />\n              <meta name=\"article:modified_time\" content={modifiedDt} />\n              <meta name=\"date\" content={modifiedDt} />\n              <meta name=\"last-modified\" content={modifiedDt} />\n              <meta httpEquiv=\"last-modified\" content={modifiedDt} />\n              {/* open graph */}\n              <meta property=\"og:title\" content={title} />\n              {/* og:description */}\n              {openDescDom}\n              <meta property=\"og:url\" content={siteUrl + locationAfterOrigin} />\n              <meta property=\"og:image\" content={ogImage || defaultOgImage} />\n              {/* twitter card */}\n              <meta name=\"twitter:title\" content={title} />\n              {/* twitter:description */}\n              {twitDescDom}\n              <meta name=\"twitter:card\" content={twittercard} />\n              <meta name=\"twitter:domain\" content={siteUrl} />\n              <meta\n                name=\"twitter:url\"\n                content={siteUrl + locationAfterOrigin}\n              />\n              {/* description(required) */}\n              {metaDescDom}\n              {/* keyword */}\n              <meta name=\"keywords\" content={keywords} />\n              {/* canonical */}\n              <link rel=\"canonical\" href={siteUrl + '/'} />\n            </Helmet>\n          )\n        }}\n      />\n    </React.Fragment>\n  )\n}\nexport default MetaInfo\n"],"sourceRoot":""}