{"version":3,"sources":["webpack:///./src/blogposts/pagelist.js","webpack:///./src/components/MetaInfo.js","webpack:///./util/convert.js"],"names":["inlineStyle","titleArea","marginBottom","spaceHorizontal","margin","listBtn","textAlign","IndexPage","contentRef","React","createRef","gistRef","state","bodyTag","cnt","componentDidMount","ref","_this","console","log","current","querySelector","iframeNode","htmlTagCovered","props","pageContext","page","html","replace","cheerio","load","$","find","attr","children","removeAttr","setState","getMarkup","getHtmlTagCovered","render","this","content","react__WEBPACK_IMPORTED_MODULE_4___default","a","createElement","_components_Layout__WEBPACK_IMPORTED_MODULE_8__","type","_components_MetaInfo__WEBPACK_IMPORTED_MODULE_11__","title","description","locationAfterOrigin","routing","id","twittercard","keywords","notebook","section","split","join","modifiedDt","lastModifiedTime","style","className","gatsby__WEBPACK_IMPORTED_MODULE_6__","to","toLowerCase","parentSection","getFormmatedDt","datetime","dangerouslySetInnerHTML","__html","react_gist__WEBPACK_IMPORTED_MODULE_5__","temphtml","Component","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","react_helmet__WEBPACK_IMPORTED_MODULE_1__","react_helmet__WEBPACK_IMPORTED_MODULE_1___default","domain","MetaInfo","metaDescDom","openDescDom","twitDescDom","length","recurCnt","Math","floor","i","push","key","name","substring","Fragment","httpEquiv","property","rel","href","d","__webpack_exports__","formattedDtBefore","set2Length","val","date","Date","getFullYear","getMonth","getDate","getHours","getMinutes"],"mappings":"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","file":"component---src-blogposts-pagelist-js-46f6431d65116a7b37e0.js","sourcesContent":["import React, { Component } from 'react'\nimport Gist from 'react-gist'\nimport { Link } from 'gatsby'\nimport cheerio from 'cheerio'\nimport Layout from '../components/Layout'\nimport routing from '../../postings/routings.json'\nimport { getFormmatedDt } from '../../util/convert'\nimport MetaInfo from '../components/MetaInfo'\n\nconst inlineStyle = {\n  titleArea: {\n    marginBottom: '2rem',\n  },\n  spaceHorizontal: {\n    margin: '0 .5rem',\n  },\n  listBtn: {\n    textAlign: 'right',\n    margin: '1rem 0',\n  },\n}\nclass IndexPage extends Component {\n  contentRef = React.createRef()\n  gistRef = React.createRef()\n  state = {\n    bodyTag: null,\n    cnt: 0,\n  }\n\n  componentDidMount = () => {\n    let ref = this.gistRef\n    console.log('content gist', this.contentRef.current.querySelector('#gist'))\n    console.log('where is gist', ref.current.iframeNode)\n    console.log('[componentDidMount]gistRef', this.gistRef)\n    // let temp = ReactDOMServer.renderToStaticMarkup(<GistReference />)\n\n    let htmlTagCovered = this.props.pageContext.page.html\n      .replace(\n        /\\t\\t\\t<p lang=\"ko-KR\" style=\"/g,\n        '<p lang=\"ko-KR\" style=\"padding-left: 1.5rem;'\n      )\n      .replace(\n        /\\t\\t\\t<p lang=\"en-US\" style=\"/g,\n        '<p lang=\"en-US\" style=\"padding-left: 1.5rem;'\n      )\n      .replace(/\\t\\t\\t<p style=\"/g, '<p style=\"padding-left: 1.5rem;')\n      .replace(/\\t\\t\\t<table style=\"/g, '<table style=\"margin: .5rem 1.5rem;')\n\n    const $ = cheerio.load(htmlTagCovered)\n    /* body 태그 */\n    const bodyTag = $('body')\n    /* a태그는 target=\"_blank\" attr을 부여하기 */\n    bodyTag.find('a').attr('target', '_blank')\n\n    /* body 태그 바로 밑의 div의 스타일 attr 없애기 */\n    bodyTag.children('div').removeAttr('style')\n\n    // TODO: git gist!: https://gist.github.com/aVolpe/b364a8fcd10f1ba833d97e9ab278f42c\n\n    if (this.state.cnt === 0 && !this.state.bodyTag) {\n      let cnt = this.state.cnt + 1\n      this.setState({\n        bodyTag: bodyTag,\n        cnt: cnt,\n      })\n    }\n  }\n\n  getMarkup = htmlTagCovered => {\n    /* OneNote 페이지의 전체 DOM */\n    const $ = cheerio.load(htmlTagCovered)\n    /* body 태그 */\n    const bodyTag = $('body')\n    /* a태그는 target=\"_blank\" attr을 부여하기 */\n    bodyTag.find('a').attr('target', '_blank')\n    /* body 태그 바로 밑의 div의 스타일 attr 없애기 */\n    bodyTag.children('div').removeAttr('style')\n    return bodyTag\n  }\n  getHtmlTagCovered = pageContext => {\n    let htmlTagCovered = pageContext.page.html\n      .replace(\n        /\\t\\t\\t<p lang=\"ko-KR\" style=\"/g,\n        '<p lang=\"ko-KR\" style=\"padding-left: 1.5rem;'\n      )\n      .replace(\n        /\\t\\t\\t<p lang=\"en-US\" style=\"/g,\n        '<p lang=\"en-US\" style=\"padding-left: 1.5rem;'\n      )\n      .replace(/\\t\\t\\t<p style=\"/g, '<p style=\"padding-left: 1.5rem;')\n      .replace(/\\t\\t\\t<table style=\"/g, '<table style=\"margin: .5rem 1.5rem;')\n    return this.getMarkup(htmlTagCovered)\n  }\n\n  render() {\n    const {\n      props: { pageContext },\n    } = this\n\n    /* html태그가 없는 내용 */\n    const content = pageContext.page.content.replace(/  /g, '')\n\n    return (\n      <Layout type=\"blog\">\n        <MetaInfo\n          title={pageContext.page.title}\n          description={content}\n          type=\"website\"\n          locationAfterOrigin={routing[pageContext.page.id]}\n          twittercard=\"summary\"\n          keywords={\n            `${pageContext.notebook},${\n              pageContext.section\n            },geoseong,dev note,` + pageContext.page.title.split(' ').join(',')\n          }\n          modifiedDt={pageContext.page.lastModifiedTime}\n        />\n        <div style={inlineStyle.titleArea}>\n          <h1 className=\"text-light\">{pageContext.page.title}</h1>\n          <div className=\"text-info\">\n            <Link\n              className=\"text-info btn\"\n              to={pageContext.notebook.toLowerCase()}\n            >\n              <span className=\"\">{pageContext.notebook}</span>\n            </Link>\n            <span\n              className=\"fas fa-angle-double-right\"\n              style={inlineStyle.spaceHorizontal}\n            />\n            <Link\n              className=\"text-info btn\"\n              to={routing[pageContext.page.parentSection.id]}\n            >\n              <span className=\"\">{pageContext.section}</span>\n            </Link>\n          </div>\n          <h6 className=\"text-right\">\n            {getFormmatedDt(pageContext.page.lastModifiedTime).datetime}\n          </h6>\n        </div>\n        {/* <div\n          className=\"geoseong-page-content\"\n          dangerouslySetInnerHTML={{\n            __html: this.getHtmlTagCovered(pageContext),\n          }}\n          ref={this.contentRef}\n        /> */}\n        {this.state.cnt === 0 ? (\n          <div\n            className=\"geoseong-page-content\"\n            dangerouslySetInnerHTML={{\n              __html: this.getHtmlTagCovered(pageContext),\n            }}\n            ref={this.contentRef}\n          />\n        ) : (\n          <div\n            className=\"geoseong-page-content\"\n            dangerouslySetInnerHTML={{ __html: this.state.bodyTag }}\n          />\n        )}\n        {this.state.cnt === 0 && (\n          <Gist\n            id=\"a35eb359793b6b48b222a9a8162c3ba1\"\n            ref={this.gistRef}\n            temphtml={this.temphtml}\n          />\n        )}\n        <div style={inlineStyle.listBtn}>\n          <Link to={routing[pageContext.page.parentSection.id]}>\n            <button type=\"button\" className=\"btn btn-secondary\">\n              목록으로\n            </button>\n          </Link>\n        </div>\n      </Layout>\n    )\n  }\n}\n\nexport default IndexPage\n","import React from 'react'\nimport Helmet from 'react-helmet'\n\n/**\n * @name MetaInfo\n * @param {Object} props \n * @description <meta>태그 조합해서 내뱉어주는 컴포넌트\n * @example \n    <MetaInfo\n      title=\"Match Online Manager\"\n      description=\"MOM Index Page\"\n      type=\"website\"\n      locationAfterOrigin=\"/test\"\n      twittercard=\"summary\"\n      keyword=\"key,word\"\n    />\n * @property {\n    title: <title>, og:title, twitter:title\n    description: og:description, twitter:description\n    type: og:type\n    locationAfterOrigin: host url 이후의 routing주소\n    twittercard: twitter:card\n    keyword: \n }   \n */\nconst domain = 'https://geoseong.github.io/'\nconst pageTitle = \"Geoseong's dev note\"\nconst mainIcon = ''\nconst MetaInfo = props => {\n  // console.log('MetaInfo props', props)\n  const descriptionLength = 320\n  let metaDescDom = []\n  let openDescDom = []\n  let twitDescDom = []\n  if (props.description && props.description.length > descriptionLength) {\n    const recurCnt = Math.floor(props.description.length / descriptionLength)\n    for (let i = 0; i < recurCnt; i++) {\n      metaDescDom.push(\n        <meta\n          key={'desc-' + i}\n          name=\"description\"\n          content={props.description.substring(\n            i * descriptionLength,\n            i * descriptionLength + descriptionLength\n          )}\n        />\n      )\n      openDescDom.push(\n        <meta\n          key={'ogdesc-' + i}\n          name=\"og:description\"\n          content={props.description.substring(\n            i * descriptionLength,\n            i * descriptionLength + descriptionLength\n          )}\n        />\n      )\n      twitDescDom.push(\n        <meta\n          key={'twitdesc-' + i}\n          name=\"twitter:description\"\n          content={props.description.substring(\n            i * descriptionLength,\n            i * descriptionLength + descriptionLength\n          )}\n        />\n      )\n    }\n  }\n  return (\n    <React.Fragment>\n      <Helmet>\n        <title>{props.title + ' : ' + pageTitle}</title>\n        {/* Last Modified */}\n        <meta name=\"date\" content={props.modifiedDt} />\n        <meta name=\"last-modified\" content={props.modifiedDt} />\n        <meta httpEquiv=\"last-modified\" content={props.modifiedDt} />\n        {/* open graph */}\n        <meta property=\"og:title\" content={props.title} />\n        {/* og:description */}\n        {openDescDom}\n        <meta property=\"og:url\" content={domain + props.locationAfterOrigin} />\n        <meta property=\"og:image\" content={mainIcon} />\n        {/* twitter card */}\n        <meta name=\"twitter:title\" content={props.title} />\n        {/* twitter:description */}\n        {twitDescDom}\n        <meta name=\"twitter:card\" content={props.twittercard} />\n        <meta name=\"twitter:domain\" content={domain} />\n        <meta name=\"twitter:url\" content={domain + props.locationAfterOrigin} />\n        {/* description(required) */}\n        {metaDescDom}\n        {/* keyword */}\n        <meta name=\"keywords\" content={props.keywords} />\n        {/* canonical */}\n        <link rel=\"canonical\" href={domain + '/'} />\n      </Helmet>\n    </React.Fragment>\n  )\n}\nexport default MetaInfo\n","const getFormmatedDt = (formattedDtBefore) => {\n  let set2Length = (val) => {return (val<10)?\"0\" + val:val;}\n  let date = new Date(formattedDtBefore);\n  let formattedDatetimeAfter = `${date.getFullYear()}-${set2Length(date.getMonth()+1)}-${set2Length(date.getDate())} ${set2Length(date.getHours())}:${set2Length(date.getMinutes())}`;\n  let formattedDateAfter = `${date.getFullYear()}-${set2Length(date.getMonth()+1)}-${set2Length(date.getDate())}`;\n  \n  return {datetime: formattedDatetimeAfter, date: formattedDateAfter};\n}\n\nexport {\n  getFormmatedDt\n}"],"sourceRoot":""}