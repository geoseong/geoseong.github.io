{"version":3,"sources":["webpack:///./src/blogposts/pagelist.js","webpack:///./src/components/MetaInfo.js","webpack:///./util/convert.js"],"names":["inlineStyle","titleArea","marginBottom","spaceHorizontal","margin","alignRight","textAlign","IndexPage","render","pageContext","this","props","htmlTagCovered","page","html","replace","bodyTag","cheerio","load","$","find","attr","children","removeAttr","content","react__WEBPACK_IMPORTED_MODULE_4___default","a","createElement","_components_Layout__WEBPACK_IMPORTED_MODULE_7__","type","_components_MetaInfo__WEBPACK_IMPORTED_MODULE_10__","title","description","locationAfterOrigin","routing","id","twittercard","keywords","notebook","section","split","join","style","className","gatsby__WEBPACK_IMPORTED_MODULE_5__","to","toLowerCase","parentSection","getFormmatedDt","lastModifiedTime","datetime","dangerouslySetInnerHTML","__html","Component","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","react_helmet__WEBPACK_IMPORTED_MODULE_1__","react_helmet__WEBPACK_IMPORTED_MODULE_1___default","domain","MetaInfo","metaDescDom","openDescDom","twitDescDom","length","recurCnt","Math","floor","i","push","key","name","substring","Fragment","property","rel","href","d","__webpack_exports__","formattedDtBefore","set2Length","val","date","Date","getFullYear","getMonth","getDate","getHours","getMinutes"],"mappings":"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","file":"component---src-blogposts-pagelist-js-045b79f0ce4b7b917f0c.js","sourcesContent":["import React, { Component } from 'react'\nimport { Link } from 'gatsby'\nimport cheerio from 'cheerio'\nimport Layout from '../components/Layout'\nimport routing from '../../postings/routings.json'\nimport { getFormmatedDt } from '../../util/convert'\nimport MetaInfo from '../components/MetaInfo'\n\nconst inlineStyle = {\n  titleArea: {\n    marginBottom: '2rem',\n  },\n  spaceHorizontal: {\n    margin: '0 .5rem',\n  },\n  alignRight: {\n    textAlign: 'right',\n  },\n}\nclass IndexPage extends Component {\n  render() {\n    const {\n      props: { pageContext },\n    } = this\n\n    let htmlTagCovered1 = pageContext.page.html.replace(\n      /\\t\\t\\t<p lang=\"ko-KR\" style=\"/g,\n      '<p lang=\"ko-KR\" style=\"padding-left: 1.5rem;'\n    )\n    let htmlTagCovered = htmlTagCovered1.replace(\n      /\\t\\t\\t<p style=\"/g,\n      '<p style=\"padding-left: 1.5rem;'\n    )\n\n    /* OneNote 페이지의 전체 DOM */\n    const $ = cheerio.load(htmlTagCovered)\n    /* body 태그 */\n    const bodyTag = $('body')\n    /* a태그는 target=\"_blank\" attr을 부여하기 */\n    bodyTag.find('a').attr('target', '_blank')\n    /* body 태그 바로 밑의 div의 스타일 attr 없애기 */\n    bodyTag.children('div').removeAttr('style')\n\n    /* html태그가 없는 내용 */\n    const content = pageContext.page.content.replace(/  /g, '')\n\n    return (\n      <Layout type=\"blog\">\n        <MetaInfo\n          title={pageContext.page.title}\n          description={content}\n          type=\"website\"\n          locationAfterOrigin={routing[pageContext.page.id]}\n          twittercard=\"summary\"\n          keywords={\n            `${pageContext.notebook},${\n              pageContext.section\n            },geoseong,dev note,` + pageContext.page.title.split(' ').join(',')\n          }\n        />\n        <div style={inlineStyle.titleArea}>\n          <h1 className=\"text-light\">{pageContext.page.title}</h1>\n          <div className=\"text-info\">\n            <Link\n              className=\"text-info btn\"\n              to={pageContext.notebook.toLowerCase()}\n            >\n              <span className=\"\">{pageContext.notebook}</span>\n            </Link>\n            <span\n              className=\"fas fa-angle-double-right\"\n              style={inlineStyle.spaceHorizontal}\n            />\n            <Link\n              className=\"text-info btn\"\n              to={routing[pageContext.page.parentSection.id]}\n            >\n              <span className=\"\">{pageContext.section}</span>\n            </Link>\n          </div>\n          <h6 className=\"text-right\">\n            {getFormmatedDt(pageContext.page.lastModifiedTime).datetime}\n          </h6>\n        </div>\n        <div\n          className=\"geoseong-page-content\"\n          dangerouslySetInnerHTML={{ __html: bodyTag }}\n        />\n        <div style={inlineStyle.alignRight}>\n          <Link to={routing[pageContext.page.parentSection.id]}>\n            <button type=\"button\" className=\"btn btn-secondary\">\n              목록으로\n            </button>\n          </Link>\n        </div>\n      </Layout>\n    )\n  }\n}\n\nexport default IndexPage\n","import React from 'react'\nimport Helmet from 'react-helmet'\n\n/**\n * @name MetaInfo\n * @param {Object} props \n * @description <meta>태그 조합해서 내뱉어주는 컴포넌트\n * @example \n    <MetaInfo\n      title=\"Match Online Manager\"\n      description=\"MOM Index Page\"\n      type=\"website\"\n      locationAfterOrigin=\"/test\"\n      twittercard=\"summary\"\n      keyword=\"key,word\"\n    />\n * @property {\n    title: <title>, og:title, twitter:title\n    description: og:description, twitter:description\n    type: og:type\n    locationAfterOrigin: host url 이후의 routing주소\n    twittercard: twitter:card\n    keyword: \n }   \n */\nconst domain = 'https://geoseong.github.io/'\nconst pageTitle = \"Geoseong's dev note\"\nconst mainIcon = ''\nconst MetaInfo = props => {\n  // console.log('MetaInfo props', props)\n  const descriptionLength = 320\n  let metaDescDom = []\n  let openDescDom = []\n  let twitDescDom = []\n  if (props.description && props.description.length > descriptionLength) {\n    const recurCnt = Math.floor(props.description.length / descriptionLength)\n    for (let i = 0; i < recurCnt; i++) {\n      metaDescDom.push(\n        <meta\n          key={'desc-' + i}\n          name=\"description\"\n          content={props.description.substring(\n            i * descriptionLength,\n            i * descriptionLength + descriptionLength\n          )}\n        />\n      )\n      openDescDom.push(\n        <meta\n          key={'ogdesc-' + i}\n          name=\"og:description\"\n          content={props.description.substring(\n            i * descriptionLength,\n            i * descriptionLength + descriptionLength\n          )}\n        />\n      )\n      twitDescDom.push(\n        <meta\n          key={'twitdesc-' + i}\n          name=\"twitter:description\"\n          content={props.description.substring(\n            i * descriptionLength,\n            i * descriptionLength + descriptionLength\n          )}\n        />\n      )\n    }\n  }\n  return (\n    <React.Fragment>\n      <Helmet>\n        <title>{props.title + ' : ' + pageTitle}</title>\n        {/* open graph */}\n        <meta property=\"og:title\" content={props.title} />\n        {/* og:description */}\n        {openDescDom}\n        <meta property=\"og:url\" content={domain + props.locationAfterOrigin} />\n        <meta property=\"og:image\" content={mainIcon} />\n        {/* twitter card */}\n        <meta name=\"twitter:title\" content={props.title} />\n        {/* twitter:description */}\n        {twitDescDom}\n        <meta name=\"twitter:card\" content={props.twittercard} />\n        <meta name=\"twitter:domain\" content={domain} />\n        <meta name=\"twitter:url\" content={domain + props.locationAfterOrigin} />\n        {/* description(required) */}\n        {metaDescDom}\n        {/* keyword */}\n        <meta name=\"keywords\" content={props.keywords} />\n        {/* canonical */}\n        <link rel=\"canonical\" href={domain + '/'} />\n      </Helmet>\n    </React.Fragment>\n  )\n}\nexport default MetaInfo\n","const getFormmatedDt = (formattedDtBefore) => {\n  let set2Length = (val) => {return (val<10)?\"0\" + val:val;}\n  let date = new Date(formattedDtBefore);\n  let formattedDatetimeAfter = `${date.getFullYear()}-${set2Length(date.getMonth()+1)}-${set2Length(date.getDate())} ${set2Length(date.getHours())}:${set2Length(date.getMinutes())}`;\n  let formattedDateAfter = `${date.getFullYear()}-${set2Length(date.getMonth()+1)}-${set2Length(date.getDate())}`;\n  \n  return {datetime: formattedDatetimeAfter, date: formattedDateAfter};\n}\n\nexport {\n  getFormmatedDt\n}"],"sourceRoot":""}