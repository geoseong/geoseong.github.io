{"pageContext":{"notebook":"Dev","section":"node.js","page":{"id":"0-be7f0f107996be48b4edda3fc8900890!1-BC575AB8E2AB9833!1963","self":"https://www.onenote.com/api/v1.0/me/notes/pages/0-be7f0f107996be48b4edda3fc8900890!1-BC575AB8E2AB9833!1963","createdTime":"2017-12-05T07:34:51.817Z","title":"Mongoose : Collection조인하기","createdByAppId":"","links":{"oneNoteEmbedUrl":{"href":"https://onedrive.live.com/redir.aspx?cid=bc575ab8e2ab9833&page=edit&resid=BC575AB8E2AB9833!1937&parId=BC575AB8E2AB9833!109&wd=target%28node.js.one%7C1ea34b4b-f4ea-b841-ba6b-444db5441a6a%2FMongoose%20%20Collection%EC%A1%B0%EC%9D%B8%ED%95%98%EA%B8%B0%7Cca9f50db-155b-ad46-bf92-7d6f33c96dc9%2F%29"},"oneNoteClientUrl":{"href":"onenote:https://d.docs.live.net/bc575ab8e2ab9833/Documents/Dev/node.js.one#Mongoose%20%20Collection%EC%A1%B0%EC%9D%B8%ED%95%98%EA%B8%B0&section-id=1ea34b4b-f4ea-b841-ba6b-444db5441a6a&page-id=ca9f50db-155b-ad46-bf92-7d6f33c96dc9&end"},"oneNoteWebUrl":{"href":"https://onedrive.live.com/redir.aspx?cid=bc575ab8e2ab9833&page=edit&resid=BC575AB8E2AB9833!1937&parId=BC575AB8E2AB9833!109&wd=target%28node.js.one%7C1ea34b4b-f4ea-b841-ba6b-444db5441a6a%2FMongoose%20%20Collection%EC%A1%B0%EC%9D%B8%ED%95%98%EA%B8%B0%7Cca9f50db-155b-ad46-bf92-7d6f33c96dc9%2F%29"}},"contentUrl":"https://www.onenote.com/api/v1.0/me/notes/pages/0-be7f0f107996be48b4edda3fc8900890!1-BC575AB8E2AB9833!1963/content","lastModifiedTime":"2017-12-05T07:37:56Z","parentSection@odata.context":"https://www.onenote.com/api/v1.0/$metadata#me/notes/sections('0-BC575AB8E2AB9833%211963')/pages('0-be7f0f107996be48b4edda3fc8900890%211-BC575AB8E2AB9833%211963')/parentSection(id,name,self)/$entity","parentSection":{"id":"0-BC575AB8E2AB9833!1963","name":"node.js","self":"https://www.onenote.com/api/v1.0/me/notes/sections/0-BC575AB8E2AB9833!1963"},"content":"       Populate()    Schema.find()이후에 populate()를 하면 끝.    대신 스키마 정의 할 때 외래키처럼 참조를 하도록 정의하는 부분이 있어야 한다.        var bedSchema = new Schema({        ward: String,        nickname: String,        room: Number,        patient: patientSchema,        device: {            device: String,            streamUrl: String,            streamApp: String,            streamSource: String,            play: Number,            recording: Number        }    },{ collection: 'tbBed' });        var eventSchema = new Schema({        nurse: String,        pid: { type: Schema.Types.ObjectId, ref: 'tbPatient' },        bid: { type: Schema.Types.ObjectId, ref: 'tbBed' },        room: Number,        patientname: String,        patientbirthdate: String,        category: String,        checked: String,        createdDt: String    },{ collection: 'tbEvent' });        Events.find({})                    .sort({createdDt: -1})                    .populate({path:'bid', select: 'nickname'})                    .exec((err, resultB)=>{                        var resultJson = [];                        resultB.forEach((data, i)=>{                            resultJson.push({                                bedno : parseInt(data.bid.nickname.substring(7, data.bid.nickname.length)),                                _id: data._id,                                pid: data.pid,                                bid: data.bid._id,                                room: data.room,                                patientname: data.patientname,                                patientbirthdate: data.patientbirthdate,                                category: data.category,                                checked: data.checked,                                createdDt: data.createdDt                            });                        });                        resolve(resultJson);                    });           ","html":"\n\t\t<div style=\"position:absolute;left:72px;top:124px;width:552px\">\n\t\t\t<h2 lang=\"en-US\" style=\"font-size:14pt;color:#2e75b5;margin-top:0pt;margin-bottom:0pt\">Populate()</h2>\n\t\t\t<p lang=\"en-US\" style=\"margin-top:0pt;margin-bottom:0pt\">Schema.find()<span lang=\"ko-KR\">&#xC774;&#xD6C4;&#xC5D0;</span> <span style=\"color:#0432ff;font-weight:bold;font-style:italic\">populate()</span><span lang=\"ko-KR\">&#xB97C;</span> <span lang=\"ko-KR\">&#xD558;&#xBA74;</span> <span lang=\"ko-KR\">&#xB05D;</span>.</p>\n\t\t\t<p style=\"margin-top:0pt;margin-bottom:0pt\">&#xB300;&#xC2E0;<span lang=\"en-US\"> </span>&#xC2A4;&#xD0A4;&#xB9C8;<span lang=\"en-US\"> </span>&#xC815;&#xC758;<span lang=\"en-US\"> </span>&#xD560;<span lang=\"en-US\"> </span>&#xB54C;<span lang=\"en-US\"> </span>&#xC678;&#xB798;&#xD0A4;&#xCC98;&#xB7FC;<span lang=\"en-US\"> </span>&#xCC38;&#xC870;&#xB97C;<span lang=\"en-US\"> </span>&#xD558;&#xB3C4;&#xB85D;<span lang=\"en-US\"> </span>&#xC815;&#xC758;&#xD558;&#xB294;<span lang=\"en-US\"> </span>&#xBD80;&#xBD84;&#xC774;<span lang=\"en-US\"> </span>&#xC788;&#xC5B4;&#xC57C;<span lang=\"en-US\"> </span>&#xD55C;&#xB2E4;<span lang=\"en-US\">.</span></p>\n\t\t\t<br>\n\t\t\t<p style=\"margin-top:0pt;margin-bottom:0pt\">var bedSchema = new Schema({</p>\n\t\t\t<p style=\"margin-top:0pt;margin-bottom:0pt\">    ward: String,</p>\n\t\t\t<p style=\"margin-top:0pt;margin-bottom:0pt\">    nickname: String,</p>\n\t\t\t<p style=\"margin-top:0pt;margin-bottom:0pt\">    room: Number,</p>\n\t\t\t<p style=\"margin-top:0pt;margin-bottom:0pt\">    patient: patientSchema,</p>\n\t\t\t<p style=\"margin-top:0pt;margin-bottom:0pt\">    device: {</p>\n\t\t\t<p style=\"margin-top:0pt;margin-bottom:0pt\">        device: String,</p>\n\t\t\t<p style=\"margin-top:0pt;margin-bottom:0pt\">        streamUrl: String,</p>\n\t\t\t<p style=\"margin-top:0pt;margin-bottom:0pt\">        streamApp: String,</p>\n\t\t\t<p style=\"margin-top:0pt;margin-bottom:0pt\">        streamSource: String,</p>\n\t\t\t<p style=\"margin-top:0pt;margin-bottom:0pt\">        play: Number,</p>\n\t\t\t<p style=\"margin-top:0pt;margin-bottom:0pt\">        recording: Number</p>\n\t\t\t<p style=\"margin-top:0pt;margin-bottom:0pt\">    }</p>\n\t\t\t<p style=\"margin-top:0pt;margin-bottom:0pt\">},{ collection: &apos;tbBed&apos; });</p>\n\t\t\t<br>\n\t\t\t<p style=\"margin-top:0pt;margin-bottom:0pt\">var eventSchema = new Schema({</p>\n\t\t\t<p style=\"margin-top:0pt;margin-bottom:0pt\">    nurse: String,</p>\n\t\t\t<p style=\"margin-top:0pt;margin-bottom:0pt\"><span style=\"color:#0432ff;text-decoration:underline\">    </span><span style=\"color:#0432ff;font-weight:bold;text-decoration:underline\">pid: { type: Schema.Types.ObjectId, ref: &apos;tbPatient&apos; },</span></p>\n\t\t\t<p style=\"margin-top:0pt;margin-bottom:0pt\"><span style=\"color:#0432ff;font-weight:bold;text-decoration:underline\">    bid: { type: Schema.Types.ObjectId, ref: &apos;tbBed&apos; },</span></p>\n\t\t\t<p style=\"margin-top:0pt;margin-bottom:0pt\">    room: Number,</p>\n\t\t\t<p style=\"margin-top:0pt;margin-bottom:0pt\">    patientname: String,</p>\n\t\t\t<p style=\"margin-top:0pt;margin-bottom:0pt\">    patientbirthdate: String,</p>\n\t\t\t<p style=\"margin-top:0pt;margin-bottom:0pt\">    category: String,</p>\n\t\t\t<p style=\"margin-top:0pt;margin-bottom:0pt\">    checked: String,</p>\n\t\t\t<p style=\"margin-top:0pt;margin-bottom:0pt\">    createdDt: String</p>\n\t\t\t<p style=\"margin-top:0pt;margin-bottom:0pt\">},{ collection: &apos;tbEvent&apos; });</p>\n\t\t\t<br>\n\t\t\t<p style=\"margin-top:0pt;margin-bottom:0pt\">Events.find({})</p>\n\t\t\t<p style=\"margin-top:0pt;margin-bottom:0pt\">                .sort({createdDt: -1})</p>\n\t\t\t<p style=\"margin-top:0pt;margin-bottom:0pt\">               <span style=\"color:#0432ff;font-weight:bold;text-decoration:underline\"> .populate({path:&apos;bid&apos;, select: &apos;nickname&apos;})</span></p>\n\t\t\t<p style=\"margin-top:0pt;margin-bottom:0pt\">                .exec((err, resultB)=&gt;{</p>\n\t\t\t<p style=\"margin-top:0pt;margin-bottom:0pt\">                    var resultJson = [];</p>\n\t\t\t<p style=\"margin-top:0pt;margin-bottom:0pt\">                    resultB.forEach((data, i)=&gt;{</p>\n\t\t\t<p style=\"margin-top:0pt;margin-bottom:0pt\">                        resultJson.push({</p>\n\t\t\t<p style=\"margin-top:0pt;margin-bottom:0pt\">                            bedno : parseInt(data.bid.nickname.substring(7, data.bid.nickname.length)),</p>\n\t\t\t<p style=\"margin-top:0pt;margin-bottom:0pt\">                            _id: data._id,</p>\n\t\t\t<p style=\"margin-top:0pt;margin-bottom:0pt\">                            pid: data.pid,</p>\n\t\t\t<p style=\"margin-top:0pt;margin-bottom:0pt\">                            bid: data.bid._id,</p>\n\t\t\t<p style=\"margin-top:0pt;margin-bottom:0pt\">                            room: data.room,</p>\n\t\t\t<p style=\"margin-top:0pt;margin-bottom:0pt\">                            patientname: data.patientname,</p>\n\t\t\t<p style=\"margin-top:0pt;margin-bottom:0pt\">                            patientbirthdate: data.patientbirthdate,</p>\n\t\t\t<p style=\"margin-top:0pt;margin-bottom:0pt\">                            category: data.category,</p>\n\t\t\t<p style=\"margin-top:0pt;margin-bottom:0pt\">                            checked: data.checked,</p>\n\t\t\t<p style=\"margin-top:0pt;margin-bottom:0pt\">                            createdDt: data.createdDt</p>\n\t\t\t<p style=\"margin-top:0pt;margin-bottom:0pt\">                        });</p>\n\t\t\t<p style=\"margin-top:0pt;margin-bottom:0pt\">                    });</p>\n\t\t\t<p style=\"margin-top:0pt;margin-bottom:0pt\">                    resolve(resultJson);</p>\n\t\t\t<p style=\"margin-top:0pt;margin-bottom:0pt\">                });</p>\n\t\t\t<br>\n\t\t</div>\n\t\n\n"}}}