{"pageContext":{"isCreatedByStatefulCreatePages":false,"notebook":"React-Native","section":"mobx","page":{"id":"0-59f23e1d8b08f640b000e6759a62e188!1-BC575AB8E2AB9833!2236","self":"https://www.onenote.com/api/v1.0/me/notes/pages/0-59f23e1d8b08f640b000e6759a62e188!1-BC575AB8E2AB9833!2236","createdTime":"2019-02-09T14:03:06.12Z","title":"MobX + react-navigation UML","createdByAppId":"","links":{"oneNoteEmbedUrl":{"href":"https://onedrive.live.com/redir.aspx?cid=bc575ab8e2ab9833&page=edit&resid=BC575AB8E2AB9833!2149&parId=BC575AB8E2AB9833!109&wd=target%28mobx.one%7Cc8f16b13-84e5-fd44-a2cc-bc2d42f7c8e5%2FMobX%20%2B%20react-navigation%20UML%7Cbe82e25a-b246-ac48-b01d-750fe1beab87%2F%29"},"oneNoteClientUrl":{"href":"onenote:https://d.docs.live.net/bc575ab8e2ab9833/Documents/React-Native/mobx.one#MobX%20%2B%20react-navigation%20UML&section-id=c8f16b13-84e5-fd44-a2cc-bc2d42f7c8e5&page-id=be82e25a-b246-ac48-b01d-750fe1beab87&end"},"oneNoteWebUrl":{"href":"https://onedrive.live.com/redir.aspx?cid=bc575ab8e2ab9833&page=edit&resid=BC575AB8E2AB9833!2149&parId=BC575AB8E2AB9833!109&wd=target%28mobx.one%7Cc8f16b13-84e5-fd44-a2cc-bc2d42f7c8e5%2FMobX%20%2B%20react-navigation%20UML%7Cbe82e25a-b246-ac48-b01d-750fe1beab87%2F%29"}},"contentUrl":"https://www.onenote.com/api/v1.0/me/notes/pages/0-59f23e1d8b08f640b000e6759a62e188!1-BC575AB8E2AB9833!2236/content","lastModifiedTime":"2019-02-09T14:04:18Z","parentSection@odata.context":"https://www.onenote.com/api/v1.0/$metadata#me/notes/sections('0-BC575AB8E2AB9833%212236')/pages('0-59f23e1d8b08f640b000e6759a62e188%211-BC575AB8E2AB9833%212236')/parentSection(id,name,self)/$entity","parentSection":{"id":"0-BC575AB8E2AB9833!2236","name":"mobx","self":"https://www.onenote.com/api/v1.0/me/notes/sections/0-BC575AB8E2AB9833!2236"},"content":"       내가 구현했던 프로젝트의 MobX + react-navigation의 파일구조 및 Flow를 UML로 그려보았다.                  ","html":"\n\t\t<div style=\"position:absolute;left:48px;top:115px;width:576px\">\n\t\t\t<p style=\"margin-top:0pt;margin-bottom:0pt\"><span style=\"font-family:Malgun Gothic\">&#xB0B4;&#xAC00;</span> <span style=\"font-family:Malgun Gothic\">&#xAD6C;&#xD604;&#xD588;&#xB358;</span> <span style=\"font-family:Malgun Gothic\">&#xD504;&#xB85C;&#xC81D;&#xD2B8;&#xC758;</span> MobX + react-navigation<span style=\"font-family:Malgun Gothic\">&#xC758;</span> <span style=\"font-family:Malgun Gothic\">&#xD30C;&#xC77C;&#xAD6C;&#xC870;</span> <span style=\"font-family:Malgun Gothic\">&#xBC0F;</span> Flow<span style=\"font-family:Malgun Gothic\">&#xB97C;</span> UML<span style=\"font-family:Malgun Gothic\">&#xB85C;</span> <span style=\"font-family:Malgun Gothic\">&#xADF8;&#xB824;&#xBCF4;&#xC558;&#xB2E4;</span>.</p>\n\t\t\t<br>\n\t\t\t<br>\n\t\t</div>\n\t\t<img alt=\"* mobx : https://mobx.js.org/intro/overview.html \nmobx httpsflegghead.io/courses/manage-complex-state-in-react-apps-with-mobx \n&#x2022; mobx with RN https://github.comlFEDevelopers/tech.description/wiki/React-Native-with-Mobx&#x201E;-Getting-Started \n&#x2022; mobx with RN https://medium.com/react-native-training/react-native-with-mobx-getting started-ba7e18d8ff44 \n&#x2022; react-navigation : https://reactnavigation.org/docs/getting-started.html \nclass Library \nmobx \n+obsetvable \nmobx-react \n*provider \nmobx-react/native \n+observer c-llolEi \nthis.props.(providere store*&apos; \nreact-navigation \nprops.navigation \n*navigate \n+goBack \n+addListener \n+isFocused \n+ state \n+setParams \n+getParam \n+dispatch \n+NavigationActions \n+StackActions \n+default: props. navigation \n+NavigationEvents = (&apos;navigation&apos;, &#x2022;onWlllFocus&apos;, &#x2022;onDidFocuS, &apos;onWillBlur&apos; , \n+createStackNavigator(RouteConfigs, StackNavigatorConfig) \n+createSwitchNavigator(RouteConfigs, SwitchNavigatorConfig) \n+createDrawerNavigator(RouteConfigs, DrawerNavigatorConfig) \n+createBottomTabNavigator(RouteConfigs, BottomTabNavigatorConfig) \n&apos;onDidBIur&apos;) \nn screen componen receive Is prop au oma I y \navigate - go to another screen, figures out the action it needs to take to do it \noBack - close active screen and move back in the stack \ndListener - subscribe to updates to navigation lifecycle \nFocused - function that returns true if the screen is focused and false \nerwlse. \ntate - current state/routes \netParams - make changes to route&apos;s params \netParam &#x2022; get a specific param with fallback \nispatch - send an action to router \n&#xAB;StackNavigatorConfig&#xBB; \nStackNavigatorConfig \n+createMaterialBottomTabNavigator(RouteConfigs, MaterialBottomTabNavigatorConfig) \n+createMaterialTopTabNavigator(RouteConfigs, TabNavigatorConfig) \n&#xAB;react-navigation&#xBB; \nNavigationActions \n+navigate({routeName, (params), (action), (key)) \n+setparams({params, key}) \n+init() \nclass Source \n&#xAB;Re&#xE6;t.Component&#xBB; \nApp.js \n+&lt;Provider store = {appStore)&gt; \n+&lt;RootStackNavigator \navi ati \n+@observer \n+class RootNavigator \n&#xAB;react-navigation&#xBB; \nStackActions \nactions, (key)) \nnewKey, routeName, params, action, immediate}) \n+push({routeName, params, (action)) \n+popToTop() \n&#xAB;RouteConfigs&#xBB; \nrouteConfig \n&#xAB;lntro&#xBB;+screen: Screen Component IntroScreen \n&#xAB;lntro&#xBB;+path: String = Intro \n&#xAB;StackNavigator&#xBB;+screen: Screen Component StackNavigator \n&#xAB;StackNavigator&#xBB;+path: String Stack \n&#xAB;NotFound&#xBB;+screen: Screen Component NotFoundScreen \n&#xAB;NotFound&#xBB;+path: String NotFound \n&#xAB;React.Component&#xBB; \nRootStackNavigator.js \nnavigation.state.params.nameys \nrofile&#x2022; , \n&#xAB;RouteConfigs&#xBB; \nkey: ${name} \n+screen: ProfileScreen \n+path: people/:name&apos; \n&#xAB;StackNavigatorConfig&#xBB; \nnavigatorConfig \n+initialRouteName \n*header \n+headerMode \n+gesturesEnabled \n+statusBarStyle \n+transitionConfig() \n&#xAB;options for the router&#xBB;+initialRouteName \n&#xAB;options for the router&#xBB;+initialRouteParams \n&#xAB;options for the router&#xBB;+initialRouteKey \n&#xAB;options for the router&#xBB;+navigationoptions: {title, header, headerTitle, \n&#xAB;options for the router&#xBB;+paths \n&#xAB;Visual option&#xBB;+mode (&apos;card&apos;, &#x2022;modall \n&#xAB;Vlsual option&#xBB;+headerMode (float. &apos;screen&apos;, &#x2022;none&apos;] \n&#xAB;Vlsual option&#xBB;+headerBackTltleVisible (true, false] \n&#xAB;Vlsual option&#xBB;+headerTransitionPreset (fade-in-place&apos;, &#x2022;uikit&apos;l // headerMode:floatpttIf \n&#xAB;Vlsual option&#xBB;+headerLayoutPreset Cleft&apos;, &apos;center] // \n&#xAB;Visual option&#xBB;+cardStyle \n&#xAB;Visual option&#xBB;+transitionconfig [&apos;transitionPropS , &apos;prevTransitionPropS , &apos;isModal&apos;l \n&#xAB;Vlsual option&#xBB;+onTransitionStart \n&#xAB;Visual option&#xBB;+onTransitionEnd \n&#xAB;Navigator props&#xBB;+screenprops: Pass down extra options to child screens \n+RootStackNavigator createStackNavigator(routeConfig, navigatorConfig) : Action creator? \n+render() \n+retu Navigationservice setTopL \nNavigationservice \n+_navigator \n&#xAB;export&#xBB;+setTopLevelNavigator(navigatorRef, LB-g: _navigator navigatorRef) \n&#xAB;export&#xBB;+reset(routeName), { _navigator.dispatch(resetAction) l.) \n&#xAB;export&#xBB;+navigate(routeName, params), { _navigator.dispatch(navigateAction) l) \n&#xAB;export&#xBB;+goBack({ _navigator.dispatch(popAction) )) \n&#xAB;StackNavigator&#xBB; \nStackNavigator.js \n+stackNav createStackNavigator(RouteConfigs, StackNavigatorConfig) \n&#xAB;Component&#xBB; \nIntro.js \n@obsetver \nNavigationService.navigateCStack, {name: &apos;proj)) \n+export default Page \nthis.props.store.user new User() l) \nnavigationRef \nAalQlolEH? \n+dispatch(action) \nonst resetAction \nindex: O, \nactions: [ \nNavigationActions.navigate({ routeName b, \nonst navigateAction NavigationActions.havigate \nrouteName, \nparams, \nonst popActi6i&#x2022;ik StackActiohS \n&#xAB;RouteConfigs&#xBB; \nRouteConfigs \n&#xAB;Stack&#xBB;+screen: Stack \n&#xAB;Stack&#xBB;+path: Stack&apos; \n&#xAB;StackNavigatorConfig&#xBB; \nStac k NavigatorConfig \n+initialRouteName: &apos;Stack \n+headerMode: &#x2022;none \n+render() \n&#xAB;Component&#xBB; \nNotFound.js \n+export default Page \n+render() \nstores \nappStore \n&#xAB;Component&#xBB; \nStack.js \n+export default Screen \n+render() \n&#xAB;@observable&#xBB;+rootNavigatorActionHorizontal: boole \n&#xAB;@observable&#xBB;+user: new user() \nexport new ObservableListStore() \nUser \nstring \nnumber \n&#xAB;@observable&#xBB;+job: string \n+export default user() \" width=\"901\" height=\"1003.5\" src=\"https://www.onenote.com/api/v1.0/me/notes/resources/0-cc3c25770b8ea0498d312aaea1a379c3!1-BC575AB8E2AB9833!2236/content?publicAuth=true&amp;mimeType=image/png\" data-src-type=\"image/png\" data-fullres-src=\"https://www.onenote.com/api/v1.0/me/notes/resources/0-1f435ed0daa0824a8276d0605261a658!1-BC575AB8E2AB9833!2236/content?publicAuth=true&amp;mimeType=image/jpeg\" data-fullres-src-type=\"image/jpeg\" style=\"position:absolute;left:52px;top:183px\">\n\t\n\n"}}}