{"pageContext":{"isCreatedByStatefulCreatePages":false,"notebook":"Web Dev","section":"node.js","page":{"id":"0-f2af0bead8826445891354791f78a0ab!1-BC575AB8E2AB9833!1963","self":"https://www.onenote.com/api/v1.0/me/notes/pages/0-f2af0bead8826445891354791f78a0ab!1-BC575AB8E2AB9833!1963","createdTime":"2017-06-27T04:46:43.337Z","title":"Fs : drain 이벤트 왜 쓰는가","createdByAppId":"","links":{"oneNoteEmbedUrl":{"href":"https://onedrive.live.com/redir.aspx?cid=bc575ab8e2ab9833&page=edit&resid=BC575AB8E2AB9833!1937&parId=BC575AB8E2AB9833!109&wd=target%28node.js.one%7C1ea34b4b-f4ea-b841-ba6b-444db5441a6a%2FFs%20%20drain%20%EC%9D%B4%EB%B2%A4%ED%8A%B8%20%EC%99%9C%20%EC%93%B0%EB%8A%94%EA%B0%80%7C0605d413-f2b8-9342-b7ff-1afc01d30447%2F%29"},"oneNoteClientUrl":{"href":"onenote:https://d.docs.live.net/bc575ab8e2ab9833/Documents/Web%20Dev/node.js.one#Fs%20%20drain%20%EC%9D%B4%EB%B2%A4%ED%8A%B8%20%EC%99%9C%20%EC%93%B0%EB%8A%94%EA%B0%80&section-id=1ea34b4b-f4ea-b841-ba6b-444db5441a6a&page-id=0605d413-f2b8-9342-b7ff-1afc01d30447&end"},"oneNoteWebUrl":{"href":"https://onedrive.live.com/redir.aspx?cid=bc575ab8e2ab9833&page=edit&resid=BC575AB8E2AB9833!1937&parId=BC575AB8E2AB9833!109&wd=target%28node.js.one%7C1ea34b4b-f4ea-b841-ba6b-444db5441a6a%2FFs%20%20drain%20%EC%9D%B4%EB%B2%A4%ED%8A%B8%20%EC%99%9C%20%EC%93%B0%EB%8A%94%EA%B0%80%7C0605d413-f2b8-9342-b7ff-1afc01d30447%2F%29"}},"contentUrl":"https://www.onenote.com/api/v1.0/me/notes/pages/0-f2af0bead8826445891354791f78a0ab!1-BC575AB8E2AB9833!1963/content","lastModifiedTime":"2019-01-08T04:50:40Z","parentSection@odata.context":"https://www.onenote.com/api/v1.0/$metadata#me/notes/sections('0-BC575AB8E2AB9833%211963')/pages('0-f2af0bead8826445891354791f78a0ab%211-BC575AB8E2AB9833%211963')/parentSection(id,name,self)/$entity","parentSection":{"id":"0-BC575AB8E2AB9833!1963","name":"node.js","self":"https://www.onenote.com/api/v1.0/me/notes/sections/0-BC575AB8E2AB9833!1963"},"content":"       아직 머릿속에서 정리가 안되어서 메모만 해 놓은 상태        https://stackoverflow.com/questions/18932488/how-to-use-drain-event-of-stream-writable-in-node-js        Imagine you're connecting 2 streams with very different bandwidths, say, uploading a local file to a slow server.     The (fast) file stream will emit data faster than the (slow) socket stream can consume it.    In this situation, node.js will keep data in memory until the slow stream gets a chance to process it.     This can get problematic if the file is very large.    To avoid this, Stream.write returns false when the underlying system buffer is full.     If you stop writing, the stream will later emit a drain event to indicate that the system buffer has emptied and it is appropriate to write again.        var stream = fs.createWriteStream('fileName.txt');    var packets = […],￼    current = -1;    function niceWrite() {￼  current += 1;    if (current === packets.length)￼    return stream.end();    var nextPacket = packets[current],￼      canContinue = stream.write(nextPacket);    // wait until stream drains to continue￼  if (!canContinue)￼    stream.once('drain', niceWrite);￼  else￼    niceWrite();￼}       ","html":"\n\t\t<div style=\"position:absolute;left:49px;top:129px;width:575px\">\n\t\t\t<h1 style=\"font-family:Calibri;font-size:16pt;color:#1e4e79;margin-top:0pt;margin-bottom:0pt\"><span style=\"font-family:Malgun Gothic\">&#xC544;&#xC9C1;</span><span lang=\"en-US\"> </span><span style=\"font-family:Malgun Gothic\">&#xBA38;&#xB9BF;&#xC18D;&#xC5D0;&#xC11C;</span><span lang=\"en-US\"> </span><span style=\"font-family:Malgun Gothic\">&#xC815;&#xB9AC;&#xAC00;</span><span lang=\"en-US\"> </span><span style=\"font-family:Malgun Gothic\">&#xC548;&#xB418;&#xC5B4;&#xC11C;</span><span lang=\"en-US\"> </span><span style=\"font-family:Malgun Gothic\">&#xBA54;&#xBAA8;&#xB9CC;</span><span lang=\"en-US\"> </span><span style=\"font-family:Malgun Gothic\">&#xD574;</span><span lang=\"en-US\"> </span><span style=\"font-family:Malgun Gothic\">&#xB193;&#xC740;</span><span lang=\"en-US\"> </span><span style=\"font-family:Malgun Gothic\">&#xC0C1;&#xD0DC;</span></h1>\n\t\t\t<br>\n\t\t\t<p style=\"margin-top:0pt;margin-bottom:0pt\"><a href=\"https://stackoverflow.com/questions/18932488/how-to-use-drain-event-of-stream-writable-in-node-js\">https://stackoverflow.com/questions/18932488/how-to-use-drain-event-of-stream-writable-in-node-js</a></p>\n\t\t\t<br>\n\t\t\t<p style=\"margin-top:0pt;margin-bottom:0pt\"><span style=\"font-family:Batang;color:#242729\">Imagine you&apos;re connecting 2 streams with very different bandwidths, say, uploading a local file to a slow server. </span></p>\n\t\t\t<p style=\"margin-top:0pt;margin-bottom:0pt\"><span style=\"font-family:Batang;color:#242729\">The (fast) file stream will emit data faster than the (slow) socket stream can consume it.</span></p>\n\t\t\t<p style=\"margin-top:0pt;margin-bottom:0pt\"><span style=\"font-family:Batang;color:#242729\">In this situation, node.js will keep data in memory until the slow stream gets a chance to process it. </span></p>\n\t\t\t<p style=\"margin-top:0pt;margin-bottom:0pt\"><span style=\"font-family:Batang;color:#242729\">This can get problematic if the file is very large.</span></p>\n\t\t\t<p style=\"margin-top:0pt;margin-bottom:0pt\"><span style=\"font-family:Batang;color:#242729\">To avoid this,&#xA0;</span><span style=\"font-family:Batang;font-size:9.5pt;color:#242729;background-color:#eff0f1\">Stream.write</span><span style=\"font-family:Batang;color:#242729\">&#xA0;returns&#xA0;</span><span style=\"font-family:Batang;font-size:9.5pt;color:#242729;background-color:#eff0f1\">false</span><span style=\"font-family:Batang;color:#242729\">&#xA0;when the underlying system buffer is full. </span></p>\n\t\t\t<p style=\"margin-top:0pt;margin-bottom:0pt\"><span style=\"font-family:Batang;color:#242729\">If you stop writing, the stream will later emit a&#xA0;</span><span style=\"font-family:Batang;font-size:9.5pt;color:#242729;background-color:#eff0f1\">drain</span><span style=\"font-family:Batang;color:#242729\">&#xA0;event to indicate that the system buffer has emptied and it is appropriate to write again.</span></p>\n\t\t\t<br>\n\t\t\t<p style=\"margin-top:0pt;margin-bottom:0pt\"><span style=\"font-family:Arial;font-size:12pt;color:#101094\">var</span><span style=\"font-family:Arial;font-size:12pt;color:#303336\"> stream = fs.createWriteStream(</span><span style=\"font-family:Arial;font-size:12pt;color:#7d2727\">&apos;fileName.txt&apos;</span><span style=\"font-family:Arial;font-size:12pt;color:#303336\">);</span></p>\n\t\t\t<p style=\"margin-top:0pt;margin-bottom:0pt\"><span style=\"font-family:Arial;font-size:12pt;color:#101094\">var</span><span style=\"font-family:Arial;font-size:12pt;color:#303336\"> packets = [</span><span style=\"font-family:Arial;font-size:12pt;color:#303336\">&#x2026;</span><span style=\"font-family:Arial;font-size:12pt;color:#303336\">],</span><span style=\"font-family:Arial;font-size:12pt;color:#303336\">&#xFFFC;</span><span style=\"font-family:Arial;font-size:12pt;color:#303336\">    current = -</span><span style=\"font-family:Arial;font-size:12pt;color:#7d2727\">1</span><span style=\"font-family:Arial;font-size:12pt;color:#303336\">;</span></p>\n\t\t\t<p style=\"margin-top:0pt;margin-bottom:0pt\"><span style=\"font-family:Arial;font-size:12pt;color:#101094\">function</span><span style=\"font-family:Arial;font-size:12pt;color:#303336\"> niceWrite() {</span><span style=\"font-family:Arial;font-size:12pt;color:#303336\">&#xFFFC;</span><span style=\"font-family:Arial;font-size:12pt;color:#303336\">  current += </span><span style=\"font-family:Arial;font-size:12pt;color:#7d2727\">1</span><span style=\"font-family:Arial;font-size:12pt;color:#303336\">;</span></p>\n\t\t\t<p style=\"margin-top:0pt;margin-bottom:0pt\"><span style=\"font-family:Arial;font-size:12pt;color:#101094\">if</span><span style=\"font-family:Arial;font-size:12pt;color:#303336\"> (current === packets.length)</span><span style=\"font-family:Arial;font-size:12pt;color:#303336\">&#xFFFC;</span><span style=\"font-family:Arial;font-size:12pt;color:#303336\">    </span><span style=\"font-family:Arial;font-size:12pt;color:#101094\">return</span><span style=\"font-family:Arial;font-size:12pt;color:#303336\"> stream.end();</span></p>\n\t\t\t<p style=\"margin-top:0pt;margin-bottom:0pt\"><span style=\"font-family:Arial;font-size:12pt;color:#101094\">var</span><span style=\"font-family:Arial;font-size:12pt;color:#303336\"> nextPacket = packets[current],</span><span style=\"font-family:Arial;font-size:12pt;color:#303336\">&#xFFFC;</span><span style=\"font-family:Arial;font-size:12pt;color:#303336\">      canContinue = stream.write(nextPacket);</span></p>\n\t\t\t<p style=\"margin-top:0pt;margin-bottom:0pt\"><span style=\"font-family:Arial;font-size:12pt;color:#828990\">// wait until stream drains to continue</span><span style=\"font-family:Arial;font-size:12pt;color:#303336\">&#xFFFC;</span><span style=\"font-family:Arial;font-size:12pt;color:#303336\">  </span><span style=\"font-family:Arial;font-size:12pt;color:#101094\">if</span><span style=\"font-family:Arial;font-size:12pt;color:#303336\"> (!canContinue)</span><span style=\"font-family:Arial;font-size:12pt;color:#303336\">&#xFFFC;</span><span style=\"font-family:Arial;font-size:12pt;color:#303336\">    stream.once(</span><span style=\"font-family:Arial;font-size:12pt;color:#7d2727\">&apos;drain&apos;</span><span style=\"font-family:Arial;font-size:12pt;color:#303336\">, niceWrite);</span><span style=\"font-family:Arial;font-size:12pt;color:#303336\">&#xFFFC;</span><span style=\"font-family:Arial;font-size:12pt;color:#303336\">  </span><span style=\"font-family:Arial;font-size:12pt;color:#101094\">else</span><span style=\"font-family:Arial;font-size:12pt;color:#303336\">&#xFFFC;</span><span style=\"font-family:Arial;font-size:12pt;color:#303336\">    niceWrite();</span><span style=\"font-family:Arial;font-size:12pt;color:#303336\">&#xFFFC;</span><span style=\"font-family:Arial;font-size:12pt;color:#303336\">}</span></p>\n\t\t</div>\n\t\n\n"}}}