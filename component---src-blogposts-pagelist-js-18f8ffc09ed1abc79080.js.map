{"version":3,"sources":["webpack:///./src/blogposts/pagelist.js","webpack:///./src/components/MetaInfo.js","webpack:///./util/convert.js"],"names":["inlineStyle","titleArea","marginBottom","spaceHorizontal","margin","listBtn","textAlign","IndexPage","contentRef","React","createRef","gistRef","gistId","gistFile","gistIframeId","state","onLoad","componentDidMount","_this","execGitGist","initUtterances","utterancesConfig","src","repo","async","theme","label","issue-term","crossorigin","utterances","document","createElement","commentBox","querySelector","Object","keys","forEach","configKey","setAttribute","setState","insertAdjacentElement","doc","iframeDom","current","contentDocument","contentWindow","iframeHtml","_updateIframeContent","id","file","domId","open","writeln","close","_defineUrl","_ref","replace","_ref2","setGistMarkup","htmlTagCovered","bodyTag","cheerio","load","$","find","attr","children","removeAttr","css","parent","addClass","inlineStyleH1","inlineStyleH2","inlineStyleH3","gistUrl","length","split","gistInfo","replaceWith","getHtmlTagCovered","pageContext","htmlTag","page","html","render","this","props","console","log","content","react__WEBPACK_IMPORTED_MODULE_8___default","a","_components_Layout__WEBPACK_IMPORTED_MODULE_11__","type","_components_MetaInfo__WEBPACK_IMPORTED_MODULE_14__","title","description","locationAfterOrigin","routing","twittercard","keywords","notebook","section","join","modifiedDt","lastModifiedTime","createdDt","createdTime","style","className","gatsby__WEBPACK_IMPORTED_MODULE_9__","to","toLowerCase","parentSection","getFormmatedDt","datetime","dangerouslySetInnerHTML","__html","ref","Component","MetaInfo","ogImage","metaDescDom","openDescDom","twitDescDom","recurCnt","Math","floor","i","push","react__WEBPACK_IMPORTED_MODULE_1___default","key","name","substring","gatsby__WEBPACK_IMPORTED_MODULE_3__","query","_ref2$site$siteMetada","site","siteMetadata","defaultTitle","siteUrl","defaultDescription","defaultImage","defaultOgImage","twitterUsername","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","httpEquiv","property","rel","href","data","_public_static_d_3468742975_json__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","d","__webpack_exports__","formattedDtBefore","set2Length","val","date","Date","getFullYear","getMonth","getDate","getHours","getMinutes"],"mappings":"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","file":"component---src-blogposts-pagelist-js-18f8ffc09ed1abc79080.js","sourcesContent":["import React, { Component } from 'react'\nimport { Link } from 'gatsby'\nimport cheerio from 'cheerio'\n// import Gist from 'react-gist'\nimport Layout from '../components/Layout'\nimport routing from '../../postings/routings.json'\nimport { getFormmatedDt } from '../../util/convert'\nimport MetaInfo from '../components/MetaInfo'\n\nconst inlineStyle = {\n  titleArea: {\n    marginBottom: '2rem',\n  },\n  spaceHorizontal: {\n    margin: '0 .5rem',\n  },\n  listBtn: {\n    textAlign: 'right',\n    margin: '1rem 0',\n  },\n}\nclass IndexPage extends Component {\n  contentRef = React.createRef()\n  gistRef = React.createRef()\n  gistId = ''\n  gistFile = null\n  gistIframeId = ''\n  state = {\n    onLoad: false,\n  }\n\n  componentDidMount = () => {\n    this.execGitGist()\n    this.initUtterances()\n  }\n\n  initUtterances = () => {\n    // https://github.com/adhrinae/gatsby-blog-template-rinae/blob/5b22ca6b72e2ecb447e0e90e4a91e698fbf87271/src/templates/Post.js\n    const utterancesConfig = {\n      src: 'https://utteranc.es/client.js',\n      repo: 'geoseong/geoseong.github.io',\n      // branch: 'master',\n      async: true,\n      theme: 'icy-dark',\n      label: 'comment',\n      'issue-term': 'pathname',\n      crossorigin: 'anonymous',\n    }\n    const utterances = document.createElement('script')\n    const commentBox = document.querySelector('.commentbox')\n\n    Object.keys(utterancesConfig).forEach(configKey => {\n      utterances.setAttribute(configKey, utterancesConfig[configKey])\n    })\n\n    this.setState({\n      onLoad: true,\n    })\n\n    commentBox.insertAdjacentElement('afterend', utterances)\n  }\n\n  execGitGist = () => {\n    if (!this.gistId) {\n      return\n    }\n    let ref = this.contentRef\n    let iframeDom = ref.current.querySelector(`#${this.gistIframeId}`)\n    let doc\n    if (iframeDom.contentDocument) {\n      doc = iframeDom.contentDocument\n    } else if (iframeDom.contentWindow) {\n      doc = iframeDom.contentWindow.document\n    }\n    const iframeHtml = this._updateIframeContent({\n      id: this.gistId,\n      file: this.gistFile,\n      domId: this.gistIframeId,\n    })\n    doc.open()\n    doc.writeln(iframeHtml)\n    doc.close()\n  }\n  /* thanks to: https://github.com/tleunen/react-gist */\n  _defineUrl = ({ id, file }) => {\n    let fileArg = file ? '?file=' + file : ''\n    return 'https://gist.github.com/' + id + '.js' + fileArg.replace('-', '.')\n  }\n\n  /* thanks to: https://github.com/tleunen/react-gist */\n  _updateIframeContent = ({ id, file, domId }) => {\n    let gistLink = this._defineUrl({ id, file })\n    let gistScript =\n      '<script type=\"text/javascript\" src=\"' + gistLink + '\"></script>'\n    let styles = '<style>*{font-size:12px;}</style>'\n    let elementId = domId\n    // let elementId = file ? 'gist-' + id + '-' + file : 'gist-' + id\n    let resizeScript =\n      'onload=\"parent.document.getElementById(\\'' +\n      elementId +\n      \"').style.height=document.body.scrollHeight + 10 + 'px'\\\"\"\n    let iframeHtml =\n      '<html><head><base target=\"_parent\">' +\n      styles +\n      '</head><body ' +\n      resizeScript +\n      '>' +\n      gistScript +\n      '</body></html>'\n    return iframeHtml\n  }\n\n  setGistMarkup = htmlTagCovered => {\n    /* OneNote 페이지의 전체 DOM */\n    const $ = cheerio.load(htmlTagCovered)\n    /* body 태그 */\n    const bodyTag = $('body')\n    /* a태그는 target=\"_blank\" attr을 부여하기 */\n    bodyTag.find('a').attr('target', '_blank')\n    /* body 태그 바로 밑의 div의 스타일 attr 없애기 */\n    bodyTag.children('div').removeAttr('style')\n    /* spacing 적용하기 */\n    bodyTag.find('p').css('padding-left', '1.5rem')\n    bodyTag.find('table').css('margin-left', '1.5rem')\n    /* #gist -> iframe */\n    bodyTag\n      .find('a[href*=\"gist.github.com\"]')\n      .parent('p')\n      .addClass('gist-wrapper')\n    /* h태그의 style 중 font-size 발라내기 */\n    let inlineStyleH1 = bodyTag.find('h1').attr('style')\n    let inlineStyleH2 = bodyTag.find('h2').attr('style')\n    let inlineStyleH3 = bodyTag.find('h3').attr('style')\n    if (inlineStyleH1) {\n      bodyTag\n        .find('h1')\n        .attr('style', inlineStyleH1.replace(/font-size:\\d+pt;/g, ''))\n    }\n    if (inlineStyleH2) {\n      bodyTag\n        .find('h2')\n        .attr('style', inlineStyleH2.replace(/font-size:\\d+pt;/g, ''))\n    }\n    if (inlineStyleH3) {\n      bodyTag\n        .find('h3')\n        .attr('style', inlineStyleH3.replace(/font-size:\\d+pt;/g, ''))\n    }\n\n    let gistDom = bodyTag.find('a[href*=\"gist.github.com\"]')\n    let gistUrl =\n      gistDom.length > 0 &&\n      bodyTag\n        .find('a[href*=\"gist.github.com\"]')\n        .attr('href')\n        .split('/')\n\n    if (gistUrl) {\n      let gistInfo = gistUrl[gistUrl.length - 1].split('#file-')\n      let gistId = gistInfo[0]\n      let gistFile = gistInfo.length > 1 && gistInfo[1]\n      const gistIframeId = gistFile\n        ? `gist-${gistId}-${gistFile}`\n        : `gist-${gistId}`\n      this.gistId = gistId\n      this.gistFile = gistFile\n      this.gistIframeId = gistIframeId\n      bodyTag\n        .find('a[href*=\"gist.github.com\"]')\n        .replaceWith(\n          `<iframe id=\"${gistIframeId}\" width=\"100%\" style=\"border-style: none;\"/>`\n        )\n    }\n\n    return bodyTag\n  }\n\n  getHtmlTagCovered = pageContext => {\n    let htmlTag = pageContext.page.html\n    return this.setGistMarkup(htmlTag)\n  }\n\n  render() {\n    const {\n      props: { pageContext },\n      state: { onLoad },\n    } = this\n\n    console.log({ onLoad })\n    /* html태그가 없는 내용 */\n    const content = pageContext.page.content.replace(/  /g, '')\n\n    return (\n      <Layout type=\"blog\">\n        <MetaInfo\n          title={pageContext.page.title}\n          description={content}\n          type=\"website\"\n          locationAfterOrigin={routing[pageContext.page.id]}\n          twittercard=\"summary\"\n          keywords={\n            `${pageContext.notebook},${\n              pageContext.section\n            },geoseong,dev note,` + pageContext.page.title.split(' ').join(',')\n          }\n          modifiedDt={pageContext.page.lastModifiedTime}\n          createdDt={pageContext.page.createdTime}\n        />\n        <div style={inlineStyle.titleArea}>\n          <h1 className=\"text-light\">{pageContext.page.title}</h1>\n          <div className=\"text-info\">\n            <Link\n              className=\"text-info btn\"\n              to={pageContext.notebook.toLowerCase()}\n            >\n              <span className=\"\">{pageContext.notebook}</span>\n            </Link>\n            <span\n              className=\"fas fa-angle-double-right\"\n              style={inlineStyle.spaceHorizontal}\n            />\n            <Link\n              className=\"text-info btn\"\n              to={routing[pageContext.page.parentSection.id]}\n            >\n              <span className=\"\">{pageContext.section}</span>\n            </Link>\n          </div>\n          <h6 className=\"text-right\">\n            {getFormmatedDt(pageContext.page.lastModifiedTime).datetime}\n          </h6>\n        </div>\n        <div\n          className=\"geoseong-page-content\"\n          dangerouslySetInnerHTML={{\n            __html: this.getHtmlTagCovered(pageContext),\n          }}\n          ref={this.contentRef}\n        />\n        {/* utterances */}\n        <div className=\"commentbox\" />\n        {!onLoad && (\n          <div className=\"comment-loading bg-dark p-3 rounded\">\n            댓글 로딩 중...\n          </div>\n        )}\n        <div style={inlineStyle.listBtn}>\n          <Link to={routing[pageContext.page.parentSection.id]}>\n            <button type=\"button\" className=\"btn btn-secondary\">\n              목록으로\n            </button>\n          </Link>\n        </div>\n      </Layout>\n    )\n  }\n}\n\nexport default IndexPage\n","import React from 'react'\nimport Helmet from 'react-helmet'\nimport { StaticQuery, graphql } from 'gatsby'\n\n/**\n * @name MetaInfo\n * @param {Object} props \n * @description <meta>태그 조합해서 내뱉어주는 컴포넌트\n * @example \n    <MetaInfo\n      title=\"Match Online Manager\"\n      description=\"MOM Index Page\"\n      type=\"website\"\n      locationAfterOrigin=\"/test\"\n      twittercard=\"summary\"\n      keyword=\"key,word\"\n    />\n * @property {\n    title: <title>, og:title, twitter:title\n    description: og:description, twitter:description\n    type: og:type\n    locationAfterOrigin: host url 이후의 routing주소\n    twittercard: twitter:card\n    keyword: \n }   \n */\nconst MetaInfo = ({\n  description,\n  title,\n  createdDt,\n  modifiedDt,\n  locationAfterOrigin,\n  twittercard,\n  keywords,\n  ogImage,\n}) => {\n  const descriptionLength = 320\n  let metaDescDom = []\n  let openDescDom = []\n  let twitDescDom = []\n  if (description && description.length > descriptionLength) {\n    const recurCnt = Math.floor(description.length / descriptionLength)\n    for (let i = 0; i < recurCnt; i++) {\n      metaDescDom.push(\n        <meta\n          key={'desc-' + i}\n          name=\"description\"\n          content={description.substring(\n            i * descriptionLength,\n            i * descriptionLength + descriptionLength\n          )}\n        />\n      )\n      openDescDom.push(\n        <meta\n          key={'ogdesc-' + i}\n          name=\"og:description\"\n          content={description.substring(\n            i * descriptionLength,\n            i * descriptionLength + descriptionLength\n          )}\n        />\n      )\n      twitDescDom.push(\n        <meta\n          key={'twitdesc-' + i}\n          name=\"twitter:description\"\n          content={description.substring(\n            i * descriptionLength,\n            i * descriptionLength + descriptionLength\n          )}\n        />\n      )\n    }\n  }\n  const query = graphql`\n    query SEO2 {\n      site {\n        siteMetadata {\n          defaultTitle: title\n          siteUrl: siteUrl\n          defaultImage: image\n        }\n      }\n    }\n  `\n  return (\n    <StaticQuery\n      query={query}\n      render={({\n        site: {\n          siteMetadata: {\n            defaultTitle,\n            defaultDescription,\n            siteUrl,\n            defaultImage,\n            twitterUsername,\n          },\n        },\n      }) => {\n        const defaultOgImage = `${siteUrl}/${defaultImage}`\n        return (\n          <Helmet>\n            <title>{title + ' : ' + defaultTitle}</title>\n            {/* Last Modified */}\n            <meta name=\"article:author\" content={'geoseong'} />\n            <meta name=\"article:published_time\" content={createdDt} />\n            <meta name=\"article:modified_time\" content={modifiedDt} />\n            <meta name=\"date\" content={modifiedDt} />\n            <meta name=\"last-modified\" content={modifiedDt} />\n            <meta httpEquiv=\"last-modified\" content={modifiedDt} />\n            {/* open graph */}\n            <meta property=\"og:title\" content={title} />\n            {/* og:description */}\n            {openDescDom}\n            <meta\n              property=\"og:url\"\n              content={`${siteUrl}/${locationAfterOrigin}/`}\n            />\n            <meta property=\"og:image\" content={ogImage || defaultOgImage} />\n            {/* twitter card */}\n            <meta name=\"twitter:title\" content={title} />\n            {/* twitter:description */}\n            {twitDescDom}\n            <meta name=\"twitter:card\" content={twittercard} />\n            <meta name=\"twitter:domain\" content={siteUrl} />\n            <meta\n              name=\"twitter:url\"\n              content={`${siteUrl}/${locationAfterOrigin}/`}\n            />\n            {/* description(required) */}\n            {metaDescDom}\n            {/* keyword */}\n            <meta name=\"keywords\" content={keywords} />\n            {/* canonical */}\n            <link rel=\"canonical\" href={siteUrl + '/'} />\n          </Helmet>\n        )\n      }}\n    />\n  )\n}\nexport default MetaInfo\n","const getFormmatedDt = (formattedDtBefore) => {\n  let set2Length = (val) => {return (val<10)?\"0\" + val:val;}\n  let date = new Date(formattedDtBefore);\n  let formattedDatetimeAfter = `${date.getFullYear()}-${set2Length(date.getMonth()+1)}-${set2Length(date.getDate())} ${set2Length(date.getHours())}:${set2Length(date.getMinutes())}`;\n  let formattedDateAfter = `${date.getFullYear()}-${set2Length(date.getMonth()+1)}-${set2Length(date.getDate())}`;\n  \n  return {datetime: formattedDatetimeAfter, date: formattedDateAfter};\n}\n\nexport {\n  getFormmatedDt\n}"],"sourceRoot":""}